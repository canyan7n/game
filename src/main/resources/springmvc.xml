<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
<!--    扫描组件-->
    <context:component-scan base-package="com.macheng"></context:component-scan>
 <!-- 配置Thymeleaf视图解析器 -->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

<!--    配置默认的DefaultServlet处理静态资源
        当前工程的web.xml配置的前端控制器DispatcherServlet的url-pattern是/
        tomcat的web.xml配置的DefualtServlet的url-pattern也是/
        两者冲突了，优先使用工程的web.xml
        开启mvc:default-servlet-handler，浏览器发送的所有请求都会被DefualtServlet处理
        如果开启mvc:annotation-driven，浏览器发送的所有请求都会先被DispatcherServlet处理，
        处理不了静态资源，在交给defaultServlet处理    -->
<!--开启默认servlet，处理静态资源-->
    <mvc:default-servlet-handler />
<!--    开启mvc注解驱动-->
    <mvc:annotation-driven></mvc:annotation-driven>
<!--    视图控制器-->
    <mvc:view-controller path="/" view-name="index"></mvc:view-controller>

    <!--开启aop-->
    <aop:aspectj-autoproxy />

    <!--    引入jdbc配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!--    配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--    jdbcTemplate-->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <!--配置数据源-->
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--    整合mybatis-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--    配置mapper接口和顺便设置了mapper.xml的包，通过上面的sqlSessionFactory创建的sqlSession
            来创建这些mapper的代理实现类对象,并将这些bean交给spring-ioc管理-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.macheng.mapper"></property>
    </bean>

    <!--    玩游戏需要的bean-->
    <!--    武器-->
    <bean id="mu" class="com.macheng.pojo.Mu">
        <property name="weaponDamage" value="20"></property>
        <property name="weaponName" value="木剑"></property>
    </bean>
    <bean id="tie" class="com.macheng.pojo.Tie">
        <property name="weaponDamage" value="50"></property>
        <property name="weaponName" value="铁剑"></property>
    </bean>
    <bean id="mo" class="com.macheng.pojo.Mo">
        <property name="weaponDamage" value="100"></property>
        <property name="weaponName" value="魔剑"></property>
    </bean>
    <!--    玩家-->
    <bean id="playerOne" class="com.macheng.pojo.Player">
        <property name="weapons" ref="mu"></property>
        <property name="playerName" value="角色1"></property>
    </bean>
    <bean id="playerTwo" class="com.macheng.pojo.Player">
        <property name="weapons" ref="tie"></property>
        <property name="playerName" value="角色2"></property>
    </bean>
    <bean id="playerThr" class="com.macheng.pojo.Player">
        <property name="weapons" ref="mo"></property>
        <property name="playerName" value="角色3"></property>
    </bean>
    <!--    怪物-->
    <bean id="monsterOne" class="com.macheng.pojo.Monster">
        <property name="name" value="小怪"></property>
        <property name="hp" value="100"></property>
        <property name="state" value="true"></property>
    </bean>
    <bean id="monsterTwo" class="com.macheng.pojo.Monster">
        <property name="name" value="精英怪"></property>
        <property name="hp" value="500"></property>
        <property name="state" value="true"></property>
    </bean>
    <bean id="monsterThr" class="com.macheng.pojo.Monster">
        <property name="name" value="Boss"></property>
        <property name="hp" value="1000"></property>
        <property name="state" value="true"></property>
    </bean>
</beans>